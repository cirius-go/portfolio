name: Deploy portfolio apps to AWS
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      target:
        description: 'Target stage to deploy'
        required: true
        type: choice
        options:
          - dev
          - prod
        default: dev
      branch:
        description: 'Branch used to deploy'
        required: true
        type: string
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TARGET: ${{ github.event.inputs.target || 'dev' }}
    defaults:
      run:
        shell: bash
        working-directory: .
    strategy:
      matrix:
        project: [cms, portfolio]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install go-task/task to run Taskfile commands
        uses: arduino/setup-task@v2
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Install dependencies
        run: task installDeps:ci
      - name: Build ${{ matrix.project }}
        run: task build:${{ env.TARGET }} -- ${{ matrix.project }}
      - name: Upload AWS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TARGET }}.${{ matrix.project }}
          path: deployment/aws/.build/${{ matrix.project }}
  deploy:
    runs-on: ubuntu-latest
    env:
      TARGET: ${{ github.event.inputs.target || 'dev' }}
    strategy:
      matrix:
        project: [cms, portfolio]
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Download AWS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.TARGET }}.${{ matrix.project }}
          path: deployment/aws/.build/${{ matrix.project }}

# - name: Configure AWS Credentials
#   uses: aws-actions/configure-aws-credentials@v4
#   with:
#     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#     aws-region: ${{ secrets.AWS_REGION }}
#     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# - uses: pulumi/actions@v6
#   with:
#     command: up
#     stack-name: cirius-go/portfolio-frontend
#     upsert: true
#   env:
#     PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
